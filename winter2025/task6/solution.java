//Status: OK
/*
Ограничение времени З секунды
Ограничение памяти  512 МБ 

В этом году главой Флатландии является Егор. Всего во Флатландии проживает n людей, каждый в своем доме. 
i-й дом находится в целочисленной точке (x_i, y_i). 
Егор может выделить некоторые тройки людей. Требуется лишь, чтобы каждый человек относился не  более, чем к одной тройке. 
Тройка людей считается счастливой, если треугольник, образованный их  домами, является невырожденным (то есть три дома не находятся на одной прямой). 

Помогите Егору определить, какого максимального количества счастливых троек можно добиться во  Флатландии. 

Формат входных данных
Первая строка содержит число n (3 <= n <= 300) — количество жителей во Флатландии. 
i-тая из следующих n строчек содержит числа x_i, y_i (-10^9 <= x_i, y_i <= 10^9)  - координаты дома, где проживает i-й человек. 
Гарантируется, что никакие два дома не находятся в одной точке. 

Формат выходных данных
Выведите одно число — максимальное количество счастливых троек, которого можно добиться во  Флатландии. 

Комментарий к примеру
В примере можно получить две счастливые тройки. Например, подойдет разбиение (1,1), (2,2),  (1,4) и (6,3), (4,5), (4,1). 

Примеры данных
Ввод 
7 
1 1 
2 2 
1 4 
6 3 
4 5 
4 1 
3 3
Вывод
2
*/

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<int[]> points = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            points.add(new int[]{x, y});
        }
        
        List<int[]> validTrio = new ArrayList<>();
        
        // Перебираем все возможные тройки точек
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    int[] p1 = points.get(i);
                    int[] p2 = points.get(j);
                    int[] p3 = points.get(k);
                    
                    long det = (long) p1[0] * (p2[1] - p3[1]) +
                               (long) p2[0] * (p3[1] - p1[1]) +
                               (long) p3[0] * (p1[1] - p2[1]);
                    
                    // Если детерминант не равен нулю, то невырожденный
                    if (det != 0) {
                        validTrio.add(new int[]{i, j, k});
                    }
                }
            }
        }
        
        //максимальное количество непересекающихся троек
        boolean[] used = new boolean[n];
        int result = 0;
        
        for (int[] trio : validTrio) {
            if (!used[trio[0]] && !used[trio[1]] && !used[trio[2]]) {
                result++;
                used[trio[0]] = true;
                used[trio[1]] = true;
                used[trio[2]] = true;
            }
        }
        System.out.println(result);
    }
}
